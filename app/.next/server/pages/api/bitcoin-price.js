"use strict";(()=>{var e={};e.id=203,e.ids=[203],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},661:e=>{e.exports=require("sqlite3")},7773:e=>{e.exports=require("winston")},2048:e=>{e.exports=require("fs")},5315:e=>{e.exports=require("path")},9648:e=>{e.exports=import("axios")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},8641:(e,t,r)=>{r.a(e,async(e,i)=>{try{r.r(t),r.d(t,{config:()=>l,default:()=>E,routeModule:()=>T});var a=r(1802),s=r(7153),n=r(6249),o=r(744),c=e([o]);o=(c.then?(await c)():c)[0];let E=(0,n.l)(o,"default"),l=(0,n.l)(o,"config"),T=new a.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/bitcoin-price",pathname:"/api/bitcoin-price",bundlePath:"",filename:""},userland:o});i()}catch(e){i(e)}})},420:(e,t,r)=>{r.d(t,{db:()=>T});var i=r(661),a=r.n(i),s=r(5315),n=r.n(s),o=r(2048),c=r.n(o),E=r(9508);class l{constructor(e){this.isInitialized=!1,this.dbPath=e||process.env.DATABASE_PATH||"./data/treasury.db",this.ensureDataDirectory()}ensureDataDirectory(){let e=n().dirname(this.dbPath);c().existsSync(e)||c().mkdirSync(e,{recursive:!0})}async connect(){return new Promise((e,t)=>{this.db=new(a()).Database(this.dbPath,r=>{r?(E.logger.error("Database connection failed:",r),t(r)):(E.logger.info("Connected to SQLite database"),e())})})}async initialize(){this.isInitialized||(await this.connect(),await this.createTables(),this.isInitialized=!0)}async createTables(){for(let e of[`CREATE TABLE IF NOT EXISTS companies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        ticker TEXT UNIQUE NOT NULL,
        exchange TEXT,
        country_code TEXT,
        btc_holdings REAL DEFAULT 0,
        shares_outstanding REAL,
        last_holdings_update TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP
      )`,`CREATE TABLE IF NOT EXISTS stock_prices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT NOT NULL,
        price REAL NOT NULL,
        currency TEXT DEFAULT 'USD',
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticker) REFERENCES companies (ticker)
      )`,`CREATE TABLE IF NOT EXISTS bitcoin_prices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        price REAL NOT NULL,
        currency TEXT DEFAULT 'USD',
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP
      )`,`CREATE TABLE IF NOT EXISTS schema_version (
        version INTEGER PRIMARY KEY,
        applied_at TEXT DEFAULT CURRENT_TIMESTAMP
      )`,"CREATE INDEX IF NOT EXISTS idx_stock_prices_ticker ON stock_prices(ticker)","CREATE INDEX IF NOT EXISTS idx_stock_prices_timestamp ON stock_prices(timestamp)","CREATE INDEX IF NOT EXISTS idx_bitcoin_prices_timestamp ON bitcoin_prices(timestamp)","CREATE INDEX IF NOT EXISTS idx_companies_ticker ON companies(ticker)","CREATE INDEX IF NOT EXISTS idx_companies_btc_holdings ON companies(btc_holdings)"])await this.run(e);let e=await this.get("SELECT MAX(version) as version FROM schema_version");e&&null!==e.version||(await this.run("INSERT INTO schema_version (version) VALUES (1)"),E.logger.info("Database schema version 1 initialized")),E.logger.info("Database tables created successfully")}async run(e,t=[]){return new Promise((r,i)=>{this.db.run(e,t,e=>{e?(E.logger.error("Database run error:",e),i(e)):r()})})}async get(e,t=[]){return new Promise((r,i)=>{this.db.get(e,t,(e,t)=>{e?(E.logger.error("Database get error:",e),i(e)):r(t)})})}async all(e,t=[]){return new Promise((r,i)=>{this.db.all(e,t,(e,t)=>{e?(E.logger.error("Database all error:",e),i(e)):r(t)})})}async transaction(e){return new Promise((t,r)=>{this.db.serialize(()=>{this.db.run("BEGIN TRANSACTION"),e(this.db).then(e=>{this.db.run("COMMIT",i=>{i?(E.logger.error("Transaction commit error:",i),r(i)):t(e)})}).catch(e=>{this.db.run("ROLLBACK",t=>{t&&E.logger.error("Transaction rollback error:",t),r(e)})})})})}async close(){return new Promise((e,t)=>{this.db.close(r=>{r?(E.logger.error("Database close error:",r),t(r)):(E.logger.info("Database connection closed"),this.isInitialized=!1,e())})})}}let T=new l},744:(e,t,r)=>{r.a(e,async(e,i)=>{try{r.r(t),r.d(t,{default:()=>o});var a=r(1925),s=r(9508),n=e([a]);async function o(e,t){if("GET"!==e.method)return t.status(405).json({message:"Method not allowed"});try{let e=await a.m.getLastPrice();if(!e){let e={success:!1,error:"No Bitcoin price available",timestamp:new Date().toISOString()};t.status(404).json(e);return}let r={success:!0,data:e,timestamp:new Date().toISOString()};t.json(r)}catch(r){s.logger.error("Error getting Bitcoin price:",r);let e={success:!1,error:"Failed to fetch Bitcoin price",timestamp:new Date().toISOString()};t.status(500).json(e)}}a=(n.then?(await n)():n)[0],i()}catch(e){i(e)}})},1925:(e,t,r)=>{r.a(e,async(e,i)=>{try{r.d(t,{m:()=>E});var a=r(9648),s=r(9508),n=r(420),o=e([a]);a=(o.then?(await o)():o)[0];class c{constructor(){this.apiUrl=process.env.COINGECKO_API_URL||"https://api.coingecko.com/api/v3"}async fetchCurrentPrice(){try{let e=await a.default.get(`${this.apiUrl}/simple/price`,{params:{ids:"bitcoin",vs_currencies:"usd"},timeout:1e4}),t=e.data?.bitcoin?.usd;if(!t)throw Error("Invalid response from CoinGecko API");return s.logger.info(`Fetched Bitcoin price: $${t}`),t}catch(t){s.logger.error("Error fetching Bitcoin price:",t);let e=await this.getLastPrice();if(e)return s.logger.warn(`Using last known Bitcoin price: $${e.price}`),e.price;throw t}}async updatePrice(){let e=await this.fetchCurrentPrice();return await n.db.run("INSERT INTO bitcoin_prices (price, currency, timestamp) VALUES (?, ?, datetime('now'))",[e,"USD"]),{price:e,currency:"USD",timestamp:new Date().toISOString()}}async getLastPrice(){return await n.db.get("SELECT * FROM bitcoin_prices ORDER BY timestamp DESC LIMIT 1")}async getPriceHistory(e=24){return await n.db.all(`SELECT * FROM bitcoin_prices 
       WHERE timestamp > datetime('now', '-' || ? || ' hours')
       ORDER BY timestamp DESC`,[e])}}let E=new c;i()}catch(e){i(e)}})},9508:(e,t,r)=>{r.d(t,{logger:()=>T});var i=r(7773),a=r.n(i),s=r(5315),n=r.n(s),o=r(2048),c=r.n(o);let E=n().join(process.cwd(),"logs");c().existsSync(E)||c().mkdirSync(E,{recursive:!0});let l=a().format.printf(({timestamp:e,level:t,message:r,...i})=>{let a=`${e} [${t}]: ${r}`;if(Object.keys(i).length>0)try{a+=` ${JSON.stringify(i,null,0)}`}catch(e){a+=" [Object with circular reference]"}return a}),T=a().createLogger({level:process.env.LOG_LEVEL||"info",format:a().format.combine(a().format.timestamp({format:"YYYY-MM-DD HH:mm:ss"}),a().format.errors({stack:!0}),a().format.splat(),l),transports:[new(a()).transports.Console({format:a().format.combine(a().format.colorize(),l)}),new(a()).transports.File({filename:n().join(E,"error.log"),level:"error"}),new(a()).transports.File({filename:n().join(E,"combined.log")})]})},7153:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},1802:(e,t,r)=>{e.exports=r(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=t(t.s=8641);module.exports=r})();