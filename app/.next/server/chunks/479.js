"use strict";exports.id=479,exports.ids=[479],exports.modules={6249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,t){return t in r?r[t]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,t)):"function"==typeof r&&"default"===t?r:void 0}}})},420:(e,r,t)=>{t.d(r,{db:()=>E});var n=t(661),i=t.n(n),s=t(5315),a=t.n(s),c=t(2048),u=t.n(c),o=t(9508);class l{constructor(e){this.isInitialized=!1,this.dbPath=e||process.env.DATABASE_PATH||"./data/treasury.db",this.ensureDataDirectory()}ensureDataDirectory(){let e=a().dirname(this.dbPath);u().existsSync(e)||u().mkdirSync(e,{recursive:!0})}async connect(){return new Promise((e,r)=>{this.db=new(i()).Database(this.dbPath,t=>{t?(o.logger.error("Database connection failed:",t),r(t)):(o.logger.info("Connected to SQLite database"),e())})})}async initialize(){this.isInitialized||(await this.connect(),await this.createTables(),this.isInitialized=!0)}async createTables(){for(let e of[`CREATE TABLE IF NOT EXISTS companies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        ticker TEXT UNIQUE NOT NULL,
        exchange TEXT,
        country_code TEXT,
        btc_holdings REAL DEFAULT 0,
        shares_outstanding REAL,
        last_holdings_update TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        updated_at TEXT DEFAULT CURRENT_TIMESTAMP
      )`,`CREATE TABLE IF NOT EXISTS stock_prices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT NOT NULL,
        price REAL NOT NULL,
        currency TEXT DEFAULT 'USD',
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticker) REFERENCES companies (ticker)
      )`,`CREATE TABLE IF NOT EXISTS bitcoin_prices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        price REAL NOT NULL,
        currency TEXT DEFAULT 'USD',
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP
      )`,`CREATE TABLE IF NOT EXISTS schema_version (
        version INTEGER PRIMARY KEY,
        applied_at TEXT DEFAULT CURRENT_TIMESTAMP
      )`,"CREATE INDEX IF NOT EXISTS idx_stock_prices_ticker ON stock_prices(ticker)","CREATE INDEX IF NOT EXISTS idx_stock_prices_timestamp ON stock_prices(timestamp)","CREATE INDEX IF NOT EXISTS idx_bitcoin_prices_timestamp ON bitcoin_prices(timestamp)","CREATE INDEX IF NOT EXISTS idx_companies_ticker ON companies(ticker)","CREATE INDEX IF NOT EXISTS idx_companies_btc_holdings ON companies(btc_holdings)"])await this.run(e);let e=await this.get("SELECT MAX(version) as version FROM schema_version");e&&null!==e.version||(await this.run("INSERT INTO schema_version (version) VALUES (1)"),o.logger.info("Database schema version 1 initialized")),o.logger.info("Database tables created successfully")}async run(e,r=[]){return new Promise((t,n)=>{this.db.run(e,r,e=>{e?(o.logger.error("Database run error:",e),n(e)):t()})})}async get(e,r=[]){return new Promise((t,n)=>{this.db.get(e,r,(e,r)=>{e?(o.logger.error("Database get error:",e),n(e)):t(r)})})}async all(e,r=[]){return new Promise((t,n)=>{this.db.all(e,r,(e,r)=>{e?(o.logger.error("Database all error:",e),n(e)):t(r)})})}async transaction(e){return new Promise((r,t)=>{this.db.serialize(()=>{this.db.run("BEGIN TRANSACTION"),e(this.db).then(e=>{this.db.run("COMMIT",n=>{n?(o.logger.error("Transaction commit error:",n),t(n)):r(e)})}).catch(e=>{this.db.run("ROLLBACK",r=>{r&&o.logger.error("Transaction rollback error:",r),t(e)})})})})}async close(){return new Promise((e,r)=>{this.db.close(t=>{t?(o.logger.error("Database close error:",t),r(t)):(o.logger.info("Database connection closed"),this.isInitialized=!1,e())})})}}let E=new l},5232:(e,r,t)=>{t.d(r,{l:()=>E});var n=t(420),i=t(9508),s=t(2048),a=t.n(s);class c{static parseTreasuriesCSV(e){try{let r=a().readFileSync(e,"utf-8").split("\n").slice(1).filter(e=>e.trim()),t=[];for(let e of r){let r=this.parseCSVLine(e);r&&t.push(r)}return i.logger.info(`Parsed ${t.length} companies from CSV`),t}catch(e){throw i.logger.error("Error parsing CSV:",e),e}}static parseCSVLine(e){try{let r=this.parseCSVFields(e);if(r.length<4)return null;let[,t,n,i]=r,s=i.match(/â‚¿([\d,]*\.?\d*)/);if(!s)return null;let a=parseFloat(s[1].replace(/,/g,""));if(a<=0)return null;let c="",u="",o={"Block, Inc.XYZ":"SQ",BIT:"BTBT"}[n];if(o)u=o,c=(c=(c=n.replace(/[A-Z]{2,8}(?:\.[A-Z]{1,3})?$/,"").trim()).replace(/,?\s*(Inc\.?|Corp\.?|Ltd\.?|LLC|PLC|SE|AG|AB|AS|Group|Holdings?)$/i,"")).replace(/,$/,"").trim();else{let e=n.match(/([A-Z]{2,8}(?:\.[A-Z]{1,3})?)$/);e?(u=e[1],c=(c=(c=n.replace(u,"").trim()).replace(/,?\s*(Inc\.?|Corp\.?|Ltd\.?|LLC|PLC|SE|AG|AB|AS|Group|Holdings?)$/i,"")).replace(/,$/,"").trim()):(c=n.trim(),u="UNKNOWN")}let l=this.extractCountryFromFlag(t);return{name:c,ticker:u,btc_holdings:a,country:l,exchange:this.guessExchange(u,l),shares_outstanding:1e6}}catch(r){return i.logger.warn("Error parsing CSV line:",e,r),null}}static parseCSVFields(e){let r=[],t="",n=!1,i=0;for(;i<e.length;){let s=e[i];'"'!==s||n?'"'===s&&n?n=!1:","!==s||n?t+=s:(r.push(t.trim()),t=""):n=!0,i++}return t&&r.push(t.trim()),r}static extractCountryFromFlag(e){return({"\uD83C\uDDFA\uD83C\uDDF8":"US","\uD83C\uDDE8\uD83C\uDDE6":"CA","\uD83C\uDDEF\uD83C\uDDF5":"JP","\uD83C\uDDE9\uD83C\uDDEA":"DE","\uD83C\uDDEC\uD83C\uDDE7":"GB","\uD83C\uDDEB\uD83C\uDDF7":"FR","\uD83C\uDDE8\uD83C\uDDF3":"CN","\uD83C\uDDED\uD83C\uDDF0":"HK","\uD83C\uDDF8\uD83C\uDDEC":"SG","\uD83C\uDDE6\uD83C\uDDFA":"AU","\uD83C\uDDF0\uD83C\uDDF7":"KR","\uD83C\uDDF3\uD83C\uDDF4":"NO","\uD83C\uDDF8\uD83C\uDDEA":"SE","\uD83C\uDDE7\uD83C\uDDF7":"BR","\uD83C\uDDE6\uD83C\uDDF7":"AR","\uD83C\uDDF2\uD83C\uDDF9":"MT","\uD83C\uDDF9\uD83C\uDDED":"TH","\uD83C\uDDF9\uD83C\uDDF7":"TR","\uD83C\uDDF0\uD83C\uDDFE":"KY","\uD83C\uDDEF\uD83C\uDDEA":"JE","\uD83C\uDDEE\uD83C\uDDF9":"IT","\uD83C\uDDE7\uD83C\uDDED":"BH","\uD83C\uDDE6\uD83C\uDDEA":"AE","\uD83C\uDDEC\uD83C\uDDEE":"GI","\uD83C\uDDEA\uD83C\uDDF8":"ES","\uD83C\uDDFF\uD83C\uDDE6":"ZA","\uD83C\uDDEE\uD83C\uDDF3":"IN"})[e]||"US"}static guessExchange(e,r){if(e.includes(".T"))return"TSE";if(e.includes(".HK"))return"HKEX";if(e.includes(".TO"))return"TSX";if(e.includes(".V"))return"TSXV";if(e.includes(".AX"))return"ASX";if(e.includes(".L"))return"LSE";if(e.includes(".PA"))return"Euronext";if(e.includes(".DE"))return"XETRA";if(e.includes(".OL"))return"OSE";if(e.includes(".ST"))return"OMX";if(e.includes(".BK"))return"SET";if(e.includes(".KQ"))return"KOSDAQ";if(e.includes(".KS"))return"KRX";if(e.includes(".MI"))return"Borsa Italiana";if(e.includes(".SA"))return"B3";if(e.includes(".JO"))return"JSE";if(e.includes(".IS"))return"BIST";if(e.includes(".AD"))return"ADX";if(e.includes(".BH"))return"BHB";if(e.includes(".BO"))return"BSE";if(e.includes(".MC"))return"BME";if(e.includes(".AQ"))return"NEX";if(e.includes(".CN"))return"CNQ";if(e.includes(".NE"))return"NEO";if(e.includes(".F"))return"Frankfurt";if(e.includes(".DU"))return"Dusseldorf";if(e.includes(".NGM"))return"NGM";switch(r){case"US":default:return"NASDAQ";case"CA":return"TSX";case"JP":return"TSE";case"GB":return"LSE";case"DE":return"XETRA";case"FR":return"Euronext";case"AU":return"ASX";case"HK":return"HKEX";case"SG":return"SGX";case"KR":return"KRX";case"NO":return"OSE";case"SE":return"OMX";case"BR":return"B3";case"CN":return"SSE";case"IN":return"BSE";case"ZA":return"JSE";case"TH":return"SET";case"TR":return"BIST"}}}class u{constructor(){}async scrapeCompanies(){try{i.logger.info("Loading companies from treasuries.csv (temporary solution)");let e=c.parseTreasuriesCSV("/app/treasuries.csv");return i.logger.info(`Loaded ${e.length} companies from CSV file`),e}catch(e){return i.logger.error("Error loading companies from CSV:",e),i.logger.info("Falling back to hardcoded list..."),[{name:"MicroStrategy",ticker:"MSTR",btc_holdings:444262,country:"US",exchange:"NASDAQ",shares_outstanding:19.5},{name:"Marathon Digital Holdings",ticker:"MARA",btc_holdings:34794,country:"US",exchange:"NASDAQ",shares_outstanding:240},{name:"Tesla",ticker:"TSLA",btc_holdings:9720,country:"US",exchange:"NASDAQ",shares_outstanding:3180}]}}}let o=new u;class l{async updateCompaniesFromScraper(){try{let e=await o.scrapeCompanies();for(let r of e)await n.db.get("SELECT * FROM companies WHERE ticker = ?",[r.ticker])?await n.db.run(`UPDATE companies 
             SET btc_holdings = ?, 
                 country_code = ?,
                 exchange = ?,
                 shares_outstanding = ?,
                 last_holdings_update = datetime('now'),
                 updated_at = datetime('now')
             WHERE ticker = ?`,[r.btc_holdings,r.country||"US",r.exchange||null,r.shares_outstanding||null,r.ticker]):await n.db.run(`INSERT INTO companies (name, ticker, exchange, country_code, btc_holdings, shares_outstanding, last_holdings_update)
             VALUES (?, ?, ?, ?, ?, ?, datetime('now'))`,[r.name,r.ticker,r.exchange||null,r.country||"US",r.btc_holdings,r.shares_outstanding||null]);i.logger.info(`Updated ${e.length} companies from scraper`)}catch(e){throw i.logger.error("Error updating companies from scraper:",e),e}}async getAllCompanies(){return await n.db.all("SELECT * FROM companies ORDER BY btc_holdings DESC")}async getCompanyByTicker(e){return await n.db.get("SELECT * FROM companies WHERE ticker = ?",[e])}async getTreasuryData(){let e=await n.db.get("SELECT price FROM bitcoin_prices ORDER BY timestamp DESC LIMIT 1");if(!e)throw Error("No Bitcoin price available");return(await n.db.all(`SELECT 
        c.*,
        sp.price as stock_price,
        sp.timestamp as price_timestamp
       FROM companies c
       LEFT JOIN (
         SELECT ticker, price, timestamp,
                ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY timestamp DESC) as rn
         FROM stock_prices
       ) sp ON c.ticker = sp.ticker AND sp.rn = 1
       ORDER BY c.btc_holdings DESC`)).map(r=>(r.stock_price&&r.shares_outstanding&&(r.market_cap=r.stock_price*r.shares_outstanding*1e6,r.btc_value=r.btc_holdings*e.price,r.btc_nav_multiple=r.btc_value>0?r.market_cap/r.btc_value:0,r.btc_per_share=r.btc_holdings/(1e6*r.shares_outstanding),r.btc_holdings_percentage=r.market_cap>0?r.btc_value/r.market_cap*100:0),r))}async addCompany(e){await n.db.run(`INSERT INTO companies (name, ticker, exchange, country_code, btc_holdings, shares_outstanding)
       VALUES (?, ?, ?, ?, ?, ?)`,[e.name,e.ticker,e.exchange||null,e.country_code||"US",e.btc_holdings,e.shares_outstanding||null])}async updateCompany(e,r){let t=[],i=[];void 0!==r.btc_holdings&&(t.push("btc_holdings = ?"),i.push(r.btc_holdings)),void 0!==r.shares_outstanding&&(t.push("shares_outstanding = ?"),i.push(r.shares_outstanding)),void 0!==r.exchange&&(t.push("exchange = ?"),i.push(r.exchange)),void 0!==r.country_code&&(t.push("country_code = ?"),i.push(r.country_code)),t.length>0&&(t.push('updated_at = datetime("now")'),i.push(e),await n.db.run(`UPDATE companies SET ${t.join(", ")} WHERE ticker = ?`,i))}}let E=new l},9508:(e,r,t)=>{t.d(r,{logger:()=>E});var n=t(7773),i=t.n(n),s=t(5315),a=t.n(s),c=t(2048),u=t.n(c);let o=a().join(process.cwd(),"logs");u().existsSync(o)||u().mkdirSync(o,{recursive:!0});let l=i().format.printf(({timestamp:e,level:r,message:t,...n})=>{let i=`${e} [${r}]: ${t}`;if(Object.keys(n).length>0)try{i+=` ${JSON.stringify(n,null,0)}`}catch(e){i+=" [Object with circular reference]"}return i}),E=i().createLogger({level:process.env.LOG_LEVEL||"info",format:i().format.combine(i().format.timestamp({format:"YYYY-MM-DD HH:mm:ss"}),i().format.errors({stack:!0}),i().format.splat(),l),transports:[new(i()).transports.Console({format:i().format.combine(i().format.colorize(),l)}),new(i()).transports.File({filename:a().join(o,"error.log"),level:"error"}),new(i()).transports.File({filename:a().join(o,"combined.log")})]})},7153:(e,r)=>{var t;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},1802:(e,r,t)=>{e.exports=t(145)}};